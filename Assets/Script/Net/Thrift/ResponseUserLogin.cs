/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Net.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ResponseUserLogin : TBase
  {
    private string _gameserver;

    /// <summary>
    /// 
    /// <seealso cref="LoginCode"/>
    /// </summary>
    public LoginCode Code { get; set; }

    public string Msg { get; set; }

    public int Uid { get; set; }

    public string Passport { get; set; }

    public string SecureKey { get; set; }

    public string Gameserver
    {
      get
      {
        return _gameserver;
      }
      set
      {
        __isset.gameserver = true;
        this._gameserver = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool gameserver;
    }

    public ResponseUserLogin() {
    }

    public ResponseUserLogin(LoginCode code, string msg, int uid, string passport, string secureKey) : this() {
      this.Code = code;
      this.Msg = msg;
      this.Uid = uid;
      this.Passport = passport;
      this.SecureKey = secureKey;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_code = false;
      bool isset_msg = false;
      bool isset_uid = false;
      bool isset_passport = false;
      bool isset_secureKey = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Code = (LoginCode)iprot.ReadI32();
              isset_code = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Msg = iprot.ReadString();
              isset_msg = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Uid = iprot.ReadI32();
              isset_uid = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Passport = iprot.ReadString();
              isset_passport = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              SecureKey = iprot.ReadString();
              isset_secureKey = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Gameserver = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_code)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_msg)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_uid)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_passport)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_secureKey)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ResponseUserLogin");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "code";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Code);
      oprot.WriteFieldEnd();
      field.Name = "msg";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Msg);
      oprot.WriteFieldEnd();
      field.Name = "uid";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Uid);
      oprot.WriteFieldEnd();
      field.Name = "passport";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Passport);
      oprot.WriteFieldEnd();
      field.Name = "secureKey";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(SecureKey);
      oprot.WriteFieldEnd();
      if (Gameserver != null && __isset.gameserver) {
        field.Name = "gameserver";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Gameserver);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ResponseUserLogin(");
      __sb.Append(", Code: ");
      __sb.Append(Code);
      __sb.Append(", Msg: ");
      __sb.Append(Msg);
      __sb.Append(", Uid: ");
      __sb.Append(Uid);
      __sb.Append(", Passport: ");
      __sb.Append(Passport);
      __sb.Append(", SecureKey: ");
      __sb.Append(SecureKey);
      if (Gameserver != null && __isset.gameserver) {
        __sb.Append(", Gameserver: ");
        __sb.Append(Gameserver);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
