/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Net.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RequestUserLogin : TBase
  {
    private string _username;
    private string _password;
    private string _sdkUid;
    private string _sdkToken;
    private string _machineId;

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }

    public string SdkUid
    {
      get
      {
        return _sdkUid;
      }
      set
      {
        __isset.sdkUid = true;
        this._sdkUid = value;
      }
    }

    public string SdkToken
    {
      get
      {
        return _sdkToken;
      }
      set
      {
        __isset.sdkToken = true;
        this._sdkToken = value;
      }
    }

    public string MachineId
    {
      get
      {
        return _machineId;
      }
      set
      {
        __isset.machineId = true;
        this._machineId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="LoginType"/>
    /// </summary>
    public LoginType Type { get; set; }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool username;
      public bool password;
      public bool sdkUid;
      public bool sdkToken;
      public bool machineId;
    }

    public RequestUserLogin() {
      this.Type = LoginType.USER_GUEST;
    }

    public RequestUserLogin(LoginType type) : this() {
      this.Type = type;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_type = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Username = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Password = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              SdkUid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              SdkToken = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              MachineId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Type = (LoginType)iprot.ReadI32();
              isset_type = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_type)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RequestUserLogin");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Username != null && __isset.username) {
        field.Name = "username";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Username);
        oprot.WriteFieldEnd();
      }
      if (Password != null && __isset.password) {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
      }
      if (SdkUid != null && __isset.sdkUid) {
        field.Name = "sdkUid";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SdkUid);
        oprot.WriteFieldEnd();
      }
      if (SdkToken != null && __isset.sdkToken) {
        field.Name = "sdkToken";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SdkToken);
        oprot.WriteFieldEnd();
      }
      if (MachineId != null && __isset.machineId) {
        field.Name = "machineId";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MachineId);
        oprot.WriteFieldEnd();
      }
      field.Name = "type";
      field.Type = TType.I32;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Type);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RequestUserLogin(");
      bool __first = true;
      if (Username != null && __isset.username) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Username: ");
        __sb.Append(Username);
      }
      if (Password != null && __isset.password) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Password: ");
        __sb.Append(Password);
      }
      if (SdkUid != null && __isset.sdkUid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SdkUid: ");
        __sb.Append(SdkUid);
      }
      if (SdkToken != null && __isset.sdkToken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SdkToken: ");
        __sb.Append(SdkToken);
      }
      if (MachineId != null && __isset.machineId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MachineId: ");
        __sb.Append(MachineId);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("Type: ");
      __sb.Append(Type);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
