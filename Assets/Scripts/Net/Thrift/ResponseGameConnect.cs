/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Net.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ResponseGameConnect : TBase
  {
    private string _msg;
    private int _playerid;
    private string _randomName;

    public bool Result { get; set; }

    public string Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }

    public int Playerid
    {
      get
      {
        return _playerid;
      }
      set
      {
        __isset.playerid = true;
        this._playerid = value;
      }
    }

    public string RandomName
    {
      get
      {
        return _randomName;
      }
      set
      {
        __isset.randomName = true;
        this._randomName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool msg;
      public bool playerid;
      public bool randomName;
    }

    public ResponseGameConnect() {
    }

    public ResponseGameConnect(bool result) : this() {
      this.Result = result;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_result = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Result = iprot.ReadBool();
              isset_result = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Msg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Playerid = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              RandomName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_result)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ResponseGameConnect");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "result";
      field.Type = TType.Bool;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(Result);
      oprot.WriteFieldEnd();
      if (Msg != null && __isset.msg) {
        field.Name = "msg";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Msg);
        oprot.WriteFieldEnd();
      }
      if (__isset.playerid) {
        field.Name = "playerid";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Playerid);
        oprot.WriteFieldEnd();
      }
      if (RandomName != null && __isset.randomName) {
        field.Name = "randomName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RandomName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ResponseGameConnect(");
      __sb.Append(", Result: ");
      __sb.Append(Result);
      if (Msg != null && __isset.msg) {
        __sb.Append(", Msg: ");
        __sb.Append(Msg);
      }
      if (__isset.playerid) {
        __sb.Append(", Playerid: ");
        __sb.Append(Playerid);
      }
      if (RandomName != null && __isset.randomName) {
        __sb.Append(", RandomName: ");
        __sb.Append(RandomName);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
