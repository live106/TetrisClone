/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Net.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ProtocolHeader : TBase
  {
    private PeerType _targetType;
    private PeerType _sourceType;
    private int _targetId;
    private int _sourceId;
    private long _channelId;
    private SerializeType _serializeType;
    private int _protocolHash;
    private sbyte _flag;
    private bool _closeSocket;

    /// <summary>
    /// 
    /// <seealso cref="PeerType"/>
    /// </summary>
    public PeerType TargetType
    {
      get
      {
        return _targetType;
      }
      set
      {
        __isset.targetType = true;
        this._targetType = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="PeerType"/>
    /// </summary>
    public PeerType SourceType
    {
      get
      {
        return _sourceType;
      }
      set
      {
        __isset.sourceType = true;
        this._sourceType = value;
      }
    }

    public int TargetId
    {
      get
      {
        return _targetId;
      }
      set
      {
        __isset.targetId = true;
        this._targetId = value;
      }
    }

    public int SourceId
    {
      get
      {
        return _sourceId;
      }
      set
      {
        __isset.sourceId = true;
        this._sourceId = value;
      }
    }

    public long ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SerializeType"/>
    /// </summary>
    public SerializeType SerializeType
    {
      get
      {
        return _serializeType;
      }
      set
      {
        __isset.serializeType = true;
        this._serializeType = value;
      }
    }

    public int ProtocolHash
    {
      get
      {
        return _protocolHash;
      }
      set
      {
        __isset.protocolHash = true;
        this._protocolHash = value;
      }
    }

    public sbyte Flag
    {
      get
      {
        return _flag;
      }
      set
      {
        __isset.flag = true;
        this._flag = value;
      }
    }

    public bool CloseSocket
    {
      get
      {
        return _closeSocket;
      }
      set
      {
        __isset.closeSocket = true;
        this._closeSocket = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool targetType;
      public bool sourceType;
      public bool targetId;
      public bool sourceId;
      public bool channelId;
      public bool serializeType;
      public bool protocolHash;
      public bool flag;
      public bool closeSocket;
    }

    public ProtocolHeader() {
      this._targetType = PeerType.PEER_TYPE_DEFAULT;
      this.__isset.targetType = true;
      this._sourceType = PeerType.PEER_TYPE_CLIENT;
      this.__isset.sourceType = true;
      this._serializeType = SerializeType.SERIALIZE_TYPE_THRIFT;
      this.__isset.serializeType = true;
      this._closeSocket = false;
      this.__isset.closeSocket = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              TargetType = (PeerType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              SourceType = (PeerType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TargetId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              SourceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              ChannelId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              SerializeType = (SerializeType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              ProtocolHash = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Byte) {
              Flag = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              CloseSocket = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ProtocolHeader");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.targetType) {
        field.Name = "targetType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TargetType);
        oprot.WriteFieldEnd();
      }
      if (__isset.sourceType) {
        field.Name = "sourceType";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)SourceType);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetId) {
        field.Name = "targetId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TargetId);
        oprot.WriteFieldEnd();
      }
      if (__isset.sourceId) {
        field.Name = "sourceId";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SourceId);
        oprot.WriteFieldEnd();
      }
      if (__isset.channelId) {
        field.Name = "channelId";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ChannelId);
        oprot.WriteFieldEnd();
      }
      if (__isset.serializeType) {
        field.Name = "serializeType";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)SerializeType);
        oprot.WriteFieldEnd();
      }
      if (__isset.protocolHash) {
        field.Name = "protocolHash";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ProtocolHash);
        oprot.WriteFieldEnd();
      }
      if (__isset.flag) {
        field.Name = "flag";
        field.Type = TType.Byte;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Flag);
        oprot.WriteFieldEnd();
      }
      if (__isset.closeSocket) {
        field.Name = "closeSocket";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CloseSocket);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ProtocolHeader(");
      bool __first = true;
      if (__isset.targetType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TargetType: ");
        __sb.Append(TargetType);
      }
      if (__isset.sourceType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SourceType: ");
        __sb.Append(SourceType);
      }
      if (__isset.targetId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TargetId: ");
        __sb.Append(TargetId);
      }
      if (__isset.sourceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SourceId: ");
        __sb.Append(SourceId);
      }
      if (__isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      if (__isset.serializeType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SerializeType: ");
        __sb.Append(SerializeType);
      }
      if (__isset.protocolHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProtocolHash: ");
        __sb.Append(ProtocolHash);
      }
      if (__isset.flag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Flag: ");
        __sb.Append(Flag);
      }
      if (__isset.closeSocket) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloseSocket: ");
        __sb.Append(CloseSocket);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
